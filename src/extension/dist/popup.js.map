{"version":3,"sources":["webpack://LinxChromeExtension/./popup.ts","webpack://LinxChromeExtension/webpack/bootstrap","webpack://LinxChromeExtension/webpack/startup"],"names":["titleInput","document","getElementById","urlInput","abstractInput","tagsInput","onPageDetailsReceived","pageDetails","value","title","url","abstract","statusIndicator","addBookmark","event","preventDefault","postUrl","localStorage","xhr","XMLHttpRequest","open","params","encodeURIComponent","replace","setRequestHeader","onreadystatechange","readyState","classList","remove","status","json","JSON","parse","responseText","error","innerText","add","window","setTimeout","close","statusText","send","style","display","alert","addEventListener","evt","chrome","runtime","getBackgroundPage","eventPage","LinxChromeExtension","getPageDetails","__webpack_module_cache__","__webpack_require__","moduleId","exports","module","__webpack_modules__"],"mappings":"6EAcA,IAAMA,EAAaC,SAASC,eAAe,SACrCC,EAAWF,SAASC,eAAe,OACnCE,EAAgBH,SAASC,eAAe,YACxCG,EAAYJ,SAASC,eAAe,QAI1C,SAASI,EAAsBC,GAC3BP,EAAWQ,MAAQD,EAAYE,MAC/BN,EAASK,MAAQD,EAAYG,IAC7BN,EAAcI,MAAQD,EAAYI,SAGtC,IAAIC,EAAmC,KAGvC,SAASC,EAAYC,GAGjBA,EAAMC,iBAGN,IAAIC,EAAUC,aAAuB,SACrC,GAAKD,EAAL,CAMA,IAAIE,EAAM,IAAIC,eACdD,EAAIE,KAAK,OAAQJ,GAAS,GAG1B,IAAIK,EAAS,mBACYC,mBAAmBtB,EAAWQ,OAC1C,QAAUc,mBAAmBnB,EAASK,OACtC,aAAec,mBAAmBlB,EAAcI,OAChD,SAAWc,mBAAmBjB,EAAUG,OAGrDa,EAASA,EAAOE,QAAQ,OAAQ,KAGhCL,EAAIM,iBAAiB,eAAgB,qCAGrCN,EAAIO,mBAAqB,WAErB,GAAsB,GAAlBP,EAAIQ,WAGJ,GAFAd,EAAgBe,UAAUC,OAAO,gBAAiB,gBAAiB,gBAEjD,KAAdV,EAAIW,OAAe,CACnB,IAAIC,EAAOC,KAAKC,MAAMd,EAAIe,mBAED,IAAfH,EAAKI,OACXtB,EAAgBuB,UAAYL,EAAKI,MACjCtB,EAAgBe,UAAUS,IAAI,kBAE9BxB,EAAgBuB,UAAY,SAC5BvB,EAAgBe,UAAUS,IAAI,iBAE9BC,OAAOC,WAAWD,OAAOE,MAAO,WAGpC3B,EAAgBuB,UAAY,iBAAmBjB,EAAIsB,WACnD5B,EAAgBe,UAAUS,IAAI,iBAM1ClB,EAAIuB,KAAKpB,GAETT,EAAgBuB,UAAY,YAC5BvB,EAAgBe,UAAUC,OAAO,gBAAiB,gBAAiB,gBACnEhB,EAAgBe,UAAUS,IAAI,iBAC9BxB,EAAgB8B,MAAMC,QAAU,cApD5BC,MAAM,uBAwDdP,OAAOQ,iBAAiB,QAAQ,SAASC,GACrClC,EAAkBX,SAASC,eAAe,UAG1CD,SAASC,eAAe,eAAe2C,iBAAiB,SAAUhC,GAGlEkC,OAAOC,QAAQC,mBAAkB,SAASC,GAGtCA,EAAUC,oBAAoBC,eAAe9C,MAGhCW,aAA2B,cAExC2B,MAAM,gCC5GVS,EAA2B,GCE/B,ODCA,SAASC,EAAoBC,GAE5B,GAAGF,EAAyBE,GAC3B,OAAOF,EAAyBE,GAAUC,QAG3C,IAAIC,EAASJ,EAAyBE,GAAY,CAGjDC,QAAS,IAOV,OAHAE,EAAoBH,GAAUE,EAAQA,EAAOD,QAASF,GAG/CG,EAAOD,QCjBRF,CAAoB,K","file":"popup.js","sourcesContent":["interface LinxChromeExtension {\r\n    getPageDetails(callback: (message: any) => void): void;\r\n}\r\n\r\ninterface Window {\r\n    LinxChromeExtension: LinxChromeExtension;\r\n}\r\n\r\ninterface PageDetails {\r\n    title: string;\r\n    url: string;\r\n    abstract: string;\r\n}\r\n\r\nconst titleInput = document.getElementById('title') as HTMLInputElement;\r\nconst urlInput = document.getElementById('url') as HTMLInputElement;\r\nconst abstractInput = document.getElementById('abstract') as HTMLInputElement;\r\nconst tagsInput = document.getElementById('tags') as HTMLInputElement;\r\n\r\n// This callback function is called when the content script has been \r\n// injected and returned its results\r\nfunction onPageDetailsReceived(pageDetails: PageDetails)  { \r\n    titleInput.value = pageDetails.title; \r\n    urlInput.value = pageDetails.url; \r\n    abstractInput.value = pageDetails.abstract; \r\n} \r\n\r\nlet statusIndicator: HTMLSpanElement = null;\r\n\r\n// POST the data to the server using XMLHttpRequest\r\nfunction addBookmark(event: Event) {\r\n\r\n    // Cancel the form submit\r\n    event.preventDefault();\r\n\r\n    // Get the REST endpoint URL from the extension config\r\n    var postUrl = localStorage['post_url'];\r\n    if (!postUrl) {\r\n        alert('POST Url is not set');\r\n        return;\r\n    }\r\n\r\n    // Build up an asynchronous AJAX POST request\r\n    var xhr = new XMLHttpRequest();\r\n    xhr.open('POST', postUrl, true);\r\n\r\n    // URLEncode each field's contents\r\n    var params = 'link_id=0' + \r\n                 '&title=' + encodeURIComponent(titleInput.value) + \r\n                 '&url=' + encodeURIComponent(urlInput.value) + \r\n                 '&abstract=' + encodeURIComponent(abstractInput.value) +\r\n                 '&tags=' + encodeURIComponent(tagsInput.value);\r\n    \r\n    // Replace any instances of the URLEncoded space char with +\r\n    params = params.replace(/%20/g, '+');\r\n\r\n    // Set correct header for form data\r\n    xhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');\r\n    \r\n    // Handle request state change events\r\n    xhr.onreadystatechange = function() { \r\n        // If the request completed\r\n        if (xhr.readyState == 4) {\r\n            statusIndicator.classList.remove('label-default', 'label-success', 'label-danger');\r\n            // If the request was successful\r\n            if (xhr.status == 200) {\r\n                var json = JSON.parse(xhr.responseText);\r\n                // If an error message was returned, show it\r\n                if(typeof json.error !== 'undefined') {\r\n                    statusIndicator.innerText = json.error;\r\n                    statusIndicator.classList.add('label-danger');  \r\n                } else { // If the data was successfully saved\r\n                    statusIndicator.innerText = 'Saved!';\r\n                    statusIndicator.classList.add('label-success');\r\n                    // Close the popup after a short delay\r\n                    window.setTimeout(window.close, 1000);\r\n                }\r\n            } else {// Show what went wrong\r\n                statusIndicator.innerText = 'Error saving: ' + xhr.statusText;\r\n                statusIndicator.classList.add('label-danger');\r\n            }\r\n        }\r\n    };\r\n\r\n    // Send the request\r\n    xhr.send(params);\r\n\r\n    statusIndicator.innerText = 'Saving...';\r\n    statusIndicator.classList.remove('label-default', 'label-success', 'label-danger');\r\n    statusIndicator.classList.add('label-default');\r\n    statusIndicator.style.display = 'inline';\r\n}\r\n\r\n// When the popup HTML has loaded\r\nwindow.addEventListener('load', function(evt) {\r\n    statusIndicator = document.getElementById('result') as HTMLSpanElement;\r\n\r\n    // Handle the bookmark form submit event with our addBookmark function\r\n    document.getElementById('addbookmark').addEventListener('submit', addBookmark);\r\n    \r\n    // Get the event page\r\n    chrome.runtime.getBackgroundPage(function(eventPage) {\r\n        // Call the getPageInfo function in the event page, passing in our onPageDetailsReceived \r\n        // function as the callback. This injects content.js into the current tab's HTML\r\n        eventPage.LinxChromeExtension.getPageDetails(onPageDetailsReceived);\r\n    });\r\n\r\n    var tagJsonUrl = localStorage['tag_json_url'];\r\n    if (!tagJsonUrl) {\r\n        alert('Tag JSON Url is not set');\r\n        return;\r\n    }\r\n});","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tif(__webpack_module_cache__[moduleId]) {\n\t\treturn __webpack_module_cache__[moduleId].exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// module exports must be returned from runtime so entry inlining is disabled\n// startup\n// Load entry module and return exports\nreturn __webpack_require__(339);\n"],"sourceRoot":""}